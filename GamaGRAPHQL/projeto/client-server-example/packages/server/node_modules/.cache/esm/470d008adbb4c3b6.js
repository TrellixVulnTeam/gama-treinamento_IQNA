let createServer,readFile,resolve,parse;_dbb‍.w("http",[["createServer",["createServer"],function(v){createServer=v}]]);_dbb‍.w("fs",[["readFile",["readFile"],function(v){readFile=v}]]);_dbb‍.w("path",[["resolve",["resolve"],function(v){resolve=v}]]);_dbb‍.w("querystring",[["parse",["parse"],function(v){parse=v}]]);




const server = createServer((request, response) => {
    switch(request.url){
        case '/status': {
            response.writeHead(200, {
                'Content-Type': 'application/json',
            });
            response.write(
                JSON.stringify({
                    status:'Estamos aqui novamente Jesse',
                }));
            response.end();
           break;
        }
        case '/sign-in': {
            const filePath = resolve(__dirname,'./pages/sign-in.html');
            readFile(filePath,(error, file) => {
                if (error){
                    response.writeHead(500, 'can\'t processo HTML file.');
                    response.end();
                    return;
                }
                response.writeHead(200);
                response.write(file);
                response.end();

            } );
            break;
        }
        case '/home': {
            const filePath = resolve(__dirname,'./pages/home.html');
            readFile(filePath,(error, file) => {
                if (error){
                    response.writeHead(500, "can't processo HTML file.");
                    response.end();
                    return;
                }
                response.writeHead(200);
                response.write(file);
                response.end();

            } );
            break;
        }
        case '/authenticate': {
            let data ='';
            request.on('data', (chunk) => {
                data+=chunk;
            });
            request.on('end', ()=> {
                // console.log(parse(data));
                const params = parse(data);
                response.writeHead(301, {
                    Location: '/home',
                } );
                response.end();
            })
            break;
        }
        default:{
            response.writeHead(404, 'Serviço não encotrado, tente outra vez!');
         
            response.end();

        }
    }
});

const PORT = process.env.PORT ? parseInt(process.env.PORT) : 8000;
const HOSTNAME = '127.0.0.1';

server.listen(PORT, HOSTNAME, () => {
    console.log(`Server is listening at http://${HOSTNAME}:${PORT}.`);
});
